ps1
these codes are to demonstrate the some choices of algorithms 
  .to make is standard I will use the same problem:
 [[17, 42, 26, 99, 26, 96, 51, 64, 9, 115],
 [2, 75, 93, 97, 13, 116, 81, 150, 155, 178],
 [147, 108, 129, 0, 165, 162, 152, 91, 193, 166],
 [60, 148, 115, 122, 152, 164, 36, 143, 116, 90],
 [109, 195, 24, 65, 131, 142, 195, 193, 20, 51],
 [40, 194, 154, 79, 12, 171, 173, 159, 155, 140],
 [127, 41, 0, 192, 180, 129, 137, 78, 170, 82],
 [79, 51, 67, 164, 9, 34, 54, 7, 125, 18],
 [60, 72, 95, 120, 87, 131, 82, 132, 2, 106],
 [51, 26, 198, 154, 199, 174, 193, 150, 177, 119]]

Remember bounds = (startRow, startCol, numRow, numCol)

algorithm1
    Here we uses the bisection method. The column then being divided using floor division to resutl the integer in half.
    divider is the locations in the mid column's rows! this is not the values this is the coordinates 
    
 
 The 1D peak problem solver algorithm is embedded in the problem not in the algorithm. The algorithm only provides the 2D peak problem solver?
 The getMaximum uses Global peak finding since it compares all values in the column selected.

 the subproblem = [(0, 0, 10, 5), (0, 6, 10, 4)] then using the problem.getSubproblemContaining function we will choose which bounds selected depending the result for problem.getBetterNeighbor returned location.

 Remember bounds = (startRow, startCol, numRow, numCol)
  the result is incorrect since the bisection method carried by the column even as the row peak finding still using GLOBAL PEAK FINDING.
  since in algorithm.py each algorithm uses recursion the tail of each probelms must be remapped to the latest result (I still need to validate this!)

  Although the result is incorrect but the status is set as a peak. Why? Answer is the final validator uses the function problem.isPeak(location) in peak.py module. This function only rechek the location with its neighbours.

Algorithm 2
  In algorithm 2 we will see the method it uses to find peak. Note the result is also incorrect athough the status is set to be set is a peak like in algorithm 1.

  but the algorithm 2 will use nearest neighbour and will consist of a lot of stack calls since it uses recursion.

  This is the nearest neighbor algorithm.

Algorithm 3
  this algorithm will divide the original matrix into 4 region based on the mid row and column.
  then finding the peak in the cross (mid row and mid column) using GLOBAL PEAK FINDING.
  then the peak found be compared to its nearest neighbors.
  The neighbor seleceted used to eliminate other 3 regions.
  re run the steps again until the nearest neighbour = GLOBAL PEAK in the cross.

Algorithm 4
  Almost the same as Algorithm 3 but the split steps is different
  1. first splot the rows in the mid
  2. use GLOBAL PEAK to find in the row
  3. use nearest neighbors to find the better neighbors
  4. the better neighbour is used to eliminate 3 other locations if the neighbor is above the mid row and left in the total column // 2 then the matrix is only consist of top left!
  STEP 4 is the main step must be understand first
  5. the mid column then use GLOBAL MAX to find its peak
  6. use nearest neighbors to find the better neighbour (NOTE ONLY IN THE TOP LEFT REGION)
  7. compare with best value location seen 

 result
    Algorithm 1 : (9, 2) => is a peak
    Algorithm 2 : (4, 1) => is a peak
    Algorithm 3 : (2, 4) => is a peak
    Algorithm 4 : (4, 1) => is a peak